# -*- coding: utf-8 -*-
"""ev vehicle

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1goyUktdS5xiGAbe0T5o02cISxCySw9tX
"""

!pip install streamlit pyngrok pandas numpy scikit-learn joblib python-dotenv plotly prophet -q

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import joblib, os

from google.colab import files
files.upload()   # choose cars_data_cleaned.csv

df = pd.read_csv("cars_data_RAW.csv")
df.head()

df = df.drop_duplicates()
df = df.fillna(df.median(numeric_only=True))
df.columns = df.columns.str.strip()
df = df.dropna()
print("✅ Cleaned dataset shape:", df.shape)
df.head()

# STEP 5 — MODEL TRAINING AND EVALUATION
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# ---- Step 1: Clean numeric columns with units ----
def clean_numeric(col):
    return (
        col.astype(str)
        .str.replace(" km/h", "", regex=False)
        .str.replace(" sec", "", regex=False)
        .str.replace(" Wh/km", "", regex=False)
        .str.replace(" km", "", regex=False)
        .str.replace(" kW", "", regex=False)
        .str.replace("*", "", regex=False)
        .str.replace(",", "", regex=False)
        .str.extract("([-+]?\d*\.?\d+)")[0]
        .astype(float)
    )

for col in ['0 - 100', 'Top Speed', 'Range*', 'Efficiency*', 'Fastcharge*']:
    if col in df.columns:
        df[col] = clean_numeric(df[col])

# ---- Step 2: Fill missing numeric values ----
df = df.fillna(df.median(numeric_only=True))

# ---- Step 3: Encode categorical columns ----
categorical_cols = df.select_dtypes(include=['object']).columns
for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col].astype(str))

# ---- Step 4: Define target and features ----
target = "price-range"  # change if your target column differs
X = df.drop(columns=[target])
y = df[target]

# ---- Step 5: Split data ----
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ---- Step 6: Scale numeric features ----
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ---- Step 7: Train model ----
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# ---- Step 8: Predict & Evaluate ----
y_pred = model.predict(X_test_scaled)

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print("✅ Model Training Complete!")
print(f"R² Score: {r2:.3f}")
print(f"MAE: {mae:.3f}")
print(f"RMSE: {rmse:.3f}")

# STEP 6 — SAVE MODEL & SCALER FOR STREAMLIT

import joblib
import os

# Create a folder to store models
os.makedirs("models", exist_ok=True)

# Save the trained model and scaler
joblib.dump(model, "models/ev_price_model.pkl")
joblib.dump(scaler, "models/scaler.pkl")

print("✅ Model and Scaler saved successfully!")

# To verify
print("📁 Files saved:")
print(os.listdir("models"))

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# from PIL import Image
# 
# # Load model and scaler
# model = joblib.load("models/ev_price_model.pkl")
# scaler = joblib.load("models/scaler.pkl")
# 
# st.set_page_config(page_title="EV Vehicle Price Predictor", page_icon="⚡", layout="centered")
# 
# # Add banner image
# st.image("https://cdn.pixabay.com/photo/2022/01/25/19/12/electric-car-6968348_1280.jpg", use_container_width=True)
# 
# st.title("⚡ Electric Vehicle Price Prediction Dashboard")
# st.markdown("### Enter the EV specifications below to forecast its estimated price range 💰")
# 
# # Input fields for user
# battery = st.number_input("🔋 Battery Capacity (kWh)", min_value=10.0, max_value=200.0, value=60.0)
# accel = st.number_input("🚀 0 - 100 km/h (sec)", min_value=2.0, max_value=20.0, value=7.0)
# speed = st.number_input("🏎️ Top Speed (km/h)", min_value=50.0, max_value=400.0, value=180.0)
# range_km = st.number_input("🔋 Range (km)", min_value=50.0, max_value=800.0, value=400.0)
# efficiency = st.number_input("⚙️ Efficiency (Wh/km)", min_value=100.0, max_value=400.0, value=180.0)
# seats = st.slider("🪑 Number of Seats", 2, 8, 5)
# 
# # Prepare input
# input_data = pd.DataFrame({
#     "battery": [battery],
#     "0 - 100": [accel],
#     "Top Speed": [speed],
#     "Range*": [range_km],
#     "Efficiency*": [efficiency],
#     "Number_of_seats": [seats]
# })
# 
# # Scale input
# scaled_data = scaler.transform(input_data)
# 
# # Predict
# if st.button("🔮 Predict Price Range"):
#     prediction = model.predict(scaled_data)[0]
#     st.success(f"💸 Estimated Price Range: **${prediction:,.2f} USD**")
#     st.balloons()
#

!pip install pyngrok streamlit -q
from pyngrok import ngrok

# Authenticate ngrok (replace with your token)
!ngrok config add-authtoken 2slgDoWDM712r8yBOT9DTvjnqA0_72FXh6nz5KEFyAQe3fjyJ

print(X.columns.tolist())

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# # Load model and scaler
# model = joblib.load("models/ev_price_model.pkl")
# scaler = joblib.load("models/scaler.pkl")
# 
# st.set_page_config(page_title="EV Vehicle Price Predictor", page_icon="⚡")
# 
# st.title("⚡ Electric Vehicle Price Predictor")
# st.markdown("Enter EV details below to estimate price range:")
# 
# # User inputs
# battery = st.number_input("🔋 Battery Capacity (kWh)", 10.0, 200.0, 60.0)
# accel = st.number_input("🚀 0–100 km/h (sec)", 2.0, 20.0, 7.0)
# speed = st.number_input("🏎️ Top Speed (km/h)", 50.0, 400.0, 180.0)
# range_km = st.number_input("🔋 Range (km)", 50.0, 800.0, 400.0)
# efficiency = st.number_input("⚙️ Efficiency (Wh/km)", 100.0, 400.0, 180.0)
# seats = st.slider("🪑 Number of Seats", 2, 8, 5)
# 
# # ✅ Match feature names to training set
# input_data = pd.DataFrame({
#     'battery': [battery],
#     '0_-_100': [accel],        # changed to match training column name
#     'Top_Speed': [speed],
#     'Range': [range_km],
#     'Efficiency': [efficiency],
#     'Number_of_seats': [seats]
# })
# 
# # Scale and predict
# scaled_data = scaler.transform(input_data)
# prediction = model.predict(scaled_data)[0]
# 
# if st.button("🔮 Predict Price"):
#     st.success(f"💸 Estimated Price Range: **${prediction:,.2f} USD**")
#     st.balloons()
#

!pip install streamlit pyngrok -q

from pyngrok import ngrok

# Paste your token below inside quotes
!ngrok config add-authtoken "2slgDoWDM712r8yBOT9DTvjnqA0_72FXh6nz5KEFyAQe3fjyJ"

!pip install streamlit pyngrok -q

!ngrok config add-authtoken "2slgDoWDM712r8yBOT9DTvjnqA0_72FXh6nz5KEFyAQe3fjyJ"

!streamlit run app.py &>/dev/null&
from pyngrok import ngrok
public_url = ngrok.connect(8501)
print("🚀 New public URL:", public_url)

"""🚀 New public URL: NgrokTunnel: "https://4bc0113a199e.ngrok-free.app" -> "http://localhost:8501"
"""

